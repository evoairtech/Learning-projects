"""
def spacing_rules(spaces_var, deciphered_message, symbols):
    if len(spaces_var) == 1:
        for key, value in morse_code_dictionary.items():
            if value == symbols:
                deciphered_message += key
                break
    elif len(spaces_var) == 3:
        for key, value in morse_code_dictionary.items():
            if value == symbols:
                deciphered_message += key
                deciphered_message += ' '
                break
"""

"""
def spacing_rules(spaces_var, deciphered_message, symbols):
    if len(spaces_var) == 1:
        for key, value in morse_code_dictionary.items():
            if value == symbols:
                deciphered_message += key
                break
    elif len(spaces_var) == 3:
        for key, value in morse_code_dictionary.items():
            if value == symbols:
                deciphered_message += key
                deciphered_message += ' '
                break
"""

morse_code_dictionary = {}


def code_decipher(morse_message):
    symbols = ''
    spaces = ''
    deciphered_message = ''
    for index, symbol in enumerate(morse_message):
        if symbol in '.-':
            symbols += symbol
            spaces = ''
            if index == len(morse_message) - 1:
                for key, value in morse_code_dictionary.items():
                    if value == symbols:
                        deciphered_message += key
                        break
        elif symbol == ' ':
            spaces += ' '
            if symbols == '' and len(spaces) < 3:
                continue
                #           spacing_rules(spaces, deciphered_message, symbols)
            if len(spaces) == 1:
                for key, value in morse_code_dictionary.items():
                    if value == symbols:
                        deciphered_message += key
                        break
            elif len(spaces) == 3:
                deciphered_message += ' '

            symbols = ''

        else:
            print(f'Skipping incorrect symbol: {symbol} and continuing forward')
            continue

    return deciphered_message


def main():
    with open('morse_code-to-eng.txt', 'r') as file:
        for line in file:
            key, value = line.strip().split(':', 1)
            morse_code_dictionary[key.strip()] = value.strip()

        print(morse_code_dictionary)


    choice = input('Direct - for direct input or File - for file name input: ')
    choice_low = choice.lower()
    
    # reading morse code from an input
    if choice_low == 'direct':
        morse_message = input('Please input a morse code to decipher: ')
        result = code_decipher(morse_message)
        print('Deciphered code is: ', result)
        
    # reading morse code from a file (the file is already in the project folder)
    elif choice_low == 'file':
        file_to_open = input('Please write out the name of the file that you want to be deciphered: ')
        with open(file_to_open, 'r') as file:
            morse_message = file.read()

        result = code_decipher(morse_message)
        print('Deciphered code is: ', result)

        with open('empty-file-write.txt', 'w') as file:
            file.write(f'{result}')

        with open('empty-file-append.txt', 'a') as file:
            file.write(f'\n{result}')

        with open('empty-file-write.txt', 'r') as file:
            file_info_1 = file.read()
            print('override text: ', file_info_1)

        with open('empty-file-append.txt', 'r') as file:
            file_info_2 = file.read()
            print('appended text: ', file_info_2)
    else:
        print('Wrong option chosen')


if __name__ == '__main__':
    main()
